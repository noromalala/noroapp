---
title: "noroapp"
format: html
editor: visual
---

## Quarto

What I could do is simple but really cool!

This is the data collected in lemurs parasite from the litterature.

## Building the app

```{r}

install.packages("shiny")
install.packages("DT")
library(shiny)
library(DT) 
library(tidyverse)

# Load the parasite data from CSV
shiny_data <- read.csv("C:/Users/nurum/Desktop/shinny/shiny_data.csv")

# Define UI ----
ui <- fluidPage(
  tags$head(
    tags$style(
      HTML(
        "
        .title {
          font-size: 24px;
        }
        .sub-title {
          font-size: 18px;
          font-weight: bold;
        }
        "
      )
    )
  ),
  titlePanel("Parasite in Wild Lemurs Population"),
  
  sidebarLayout(
    sidebarPanel(
      # Adding the image in the sidebar panel with spacing
     tags$style(".sidebar .shiny-input-container { margin-bottom: 20px; }"),
img(src = "https://raw.githubusercontent.com/noromalala/noroapp/main/lemur.JPG", 
    width = 425, height = 600),
      br(),
      br(),
      br(),
      br(),
      br(),
      br(),
      selectInput("host_filter", "Filter by Host Species:",
                  choices = c("All", unique(shiny_data$Host.genus))),
      selectInput("type_filter", "Filter by Parasite Type:",
                  choices = c("All", unique(shiny_data$Parasite.type)))
    ),
    mainPanel(
      br(),  
      dataTableOutput("overview_title"),  
      titlePanel("Overview of the Data"),  
      DT::dataTableOutput("filtered_table"), 
      br(), 
      plotOutput("host_parasite_plot")  # Add plot output
    )
  )
)

# Define server logic ----
server <- function(input, output) {
  
  filtered_data <- reactive({
    data <- shiny_data
    
    # Filter by Host Species
    if (input$host_filter != "All") {
      data <- data[data$Host.genus == input$host_filter, ]
    }
    
    # Filter by Parasite Type
    if (input$type_filter != "All") {
      data <- data[data$Parasite.type == input$type_filter, ]
    }
    
    return(data)
  })
  
  # Render the filtered parasite data as a DataTable
  output$filtered_table <- DT::renderDataTable({
    datatable(
      filtered_data(),
      options = list(pageLength = 5)  # Setting default page length to 5
    )
  })
  
  # Output the title "Overview of Parasite in Lemurs"
  output$overview_title <- renderDataTable({
    datatable(
      NULL,
      options = list(dom = 't', paging = FALSE, ordering = FALSE, searching = FALSE),
      rownames = FALSE,
      colnames = FALSE
    )
  })
  
  # Render the host-parasite plot
  output$host_parasite_plot <- renderPlot({
    # Filter data based on selected host species
    filtered_host_data <- shiny_data
    if (input$host_filter != "All") {
      filtered_host_data <- filtered_host_data[filtered_host_data$Host.genus == input$host_filter, ]
    }
    
    # Count occurrences of each parasite type
    parasite_counts <- table(filtered_host_data$`Type.Parasite.Detailled`)
    
    # Plot bar chart
    barplot(parasite_counts, main = "Parasite Types by Host Species",
            xlab = "Parasite Type", ylab = "Frequency", col = "skyblue")
  })
}

# Run the app ----
shinyApp(ui = ui, server = server)

```
